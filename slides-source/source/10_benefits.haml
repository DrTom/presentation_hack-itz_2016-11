
%section#benefits_intro
  :markdown
    # 🕚  Benefits - Developer Experience - Architecture


%section#benefits_uniform_code
  :markdown
    # ♻ Uniform Programming Clojure + ClojureScript

    Our primary goal is to implement features;
    not to write _HTML_, _React_, _SQL_, _ActiveRecord_, ...
    {: .text-info}

    Traditional frameworks foster separation by technology and overhead in
    communication.
    {: .text-warning}

    * **same code** on the server and client (almost)

    * it works, actually **it is awesome**!

    e.g. [duration parser and validator in Cider-CI](https://github.com/cider-ci/cider-ci_clj-utils/blob/9a4a0f61fe980a8b2ef6eed3779a814fdd54f5ce/src/cider_ci/utils/duration.cljc)


%section#benefits_uniform_data
  :markdown
    # 🌲  Uniform Structures

    **It is all just data - trees mostly.**

    * DOM [weavejester/hiccup](https://github.com/weavejester/hiccup), [reagent](https://github.com/reagent-project/reagent)

    * SQL [kk/honeysql](https://github.com/jkk/honeysql)

    Lisp's homoiconicity really flies here!



%section#benefits_clojurescript
  :markdown
    # 🚀  ClojureScript Programming Experience

    > It is really better than writing pure JavaScript!

    * source maps

    * interactive programming with [bhauman/lein-figwheel](https://github.com/bhauman/lein-figwheel)

    Demo?


%section#benefits_architecture
  :markdown
    # 🏠  Architecture

    Most application have a scrum driven (i.e. non at all) architecture.
    {: .text-warning}

    On the next level the architectures are mostly technology driven.

    We should include the features and demands in our architectures.
    {: .text-success}


%section#benefits_example-ci-architecture
  :markdown

    # 🍏  Feature Driven Architecture

    ![Cider-CI](cider-v4-architecture.png){: width="70%"}


    <small> Cider-CI Architecture Refactoring </small>

    ⇒ cheaper and easier changes and refactorings

